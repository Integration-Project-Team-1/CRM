name: CI/CD Pipeline

on:
  push:
    branches:
      - testDev


jobs:
  build:
    runs-on: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean install

  test:
    name: Run Unit and Integration Tests
    runs-on: test
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Run Unit Tests
        run: mvn test

      - name: Run Integration Tests
        run: mvn verify

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: target/surefire-reports

  e2e-tests:
    name: Run End-to-End Tests
    runs-on: test
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set up Selenium
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser

      - name: Run End-to-End Tests
        run: mvn failsafe:integration-test failsafe:verify

      - name: Upload End-to-End Test Report
        uses: actions/upload-artifact@v2
        with:
          name: e2e-test-report
          path: target/failsafe-reports

  deploy:
    name: Deploy to Testing
    runs-on: test
    needs: e2e-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DEV_HOST=${{ secrets.DEV_HOST }}" >> .env
          echo "RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "CONSUMER_KEY=${{ secrets.CONSUMER_KEY }}" >> .env
          echo "CONSUMER_SECRET=${{ secrets.CONSUMER_SECRET }}" >> .env
          echo "CONSUMING_QUEUE=${{ secrets.CONSUMING_QUEUE }}" >> .env
          echo "EXCHANGE=${{ secrets.EXCHANGE }}" >> .env
          echo "LOGIN_URL=${{ secrets.LOGIN_URL }}" >> .env
          echo "QUEUE_NAME_HEARTBEAT=${{ secrets.QUEUE_NAME_HEARTBEAT }}" >> .env
          echo "ROUTINGKEY=${{ secrets.ROUTINGKEY }}" >> .env
          echo "ROUTINGKEY_BUSINESS=${{ secrets.ROUTINGKEY_BUSINESS }}" >> .env
          echo "ROUTINGKEY_CONSUMPTION=${{ secrets.ROUTINGKEY_CONSUMPTION }}" >> .env
          echo "ROUTINGKEY_USER=${{ secrets.ROUTINGKEY_USER }}" >> .env
          echo "SALESFORCE_PASSWORD=${{ secrets.SALESFORCE_PASSWORD }}" >> .env
          echo "SALESFORCE_SECURITY_TOKEN=${{ secrets.SALESFORCE_SECURITY_TOKEN }}" >> .env
          echo "SALESFORCE_USERNAME=${{ secrets.SALESFORCE_USERNAME }}" >> .env

      - name: Check Docker Compose Syntax
        run: docker compose config

      - name: Deploy to Testing
        run: |
          docker compose down --volumes
          docker compose up -d

  gated-checkin:
    if: github.event_name == 'pull_request'
    name: Gated Check-In
    runs-on: test
    needs: [test, e2e-tests]

    steps:
      - name: Approve PR if all tests pass
        run: echo "All tests passed. PR can be merged."
